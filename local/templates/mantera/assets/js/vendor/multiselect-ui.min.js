const getTemplateMultiselect=(e=[],t,s,i)=>{t=t??"Placeholder по умолч.";let l=s;const c=e.map(e=>{let t="";return Array.isArray(i)&&0<i.length&&i.includes(e.id)&&(t=" checked=checked"),`
        <div class="select-option-list__option">
            <div class="checkbox-option">
                <input class="checkbox-option__trigger" name="${l}" type="checkbox" value="${e.value}" id=${e.id} data-type="item" data-id=${e.id} data-prop="${e.dataProp}"${t}>
                <label class="checkbox-option__label" for=${e.id}>${e.value}</label>
            </div>
        </div>
        `});return`
        <div class="select-ui__backdrop" data-type="backdrop"></div>
        <div class="select-ui__input" data-type="input">
            <span data-type="value">${t}</span>
        </div>
        <div class="select-ui__dropdown">
            <ul class="select-ui__list">
                ${c.join("")}
            </ul>
        </div>
    `};class MultiselectUI{constructor(e,t){this.$el=document.querySelector(e),this.options=t,this.selectedId=t.selectedId,this.fakeSelect=document.querySelector(".select-ui-hide"),this.render(),this.checkboxMultiSelect=this.$el.querySelectorAll('[data-type="item"]'),this.items=[],this.selectText=[],this.setup()}render=()=>{var{placeholder:e,data:t,name:s,selectedIds:i}=this.options;this.$el.classList.add("select-ui"),this.$el.innerHTML=getTemplateMultiselect(t,e,s,i),this.hideFakeSelect()};setup=()=>{this.$value=this.$el.querySelector('[data-type="value"]'),this.$el.addEventListener("click",this.toggle),this.checkboxMultiSelect.forEach(e=>{e.addEventListener("change",this.onChangeHandler)}),Array.isArray(this.options.selectedIds)&&this.options.selectedIds.map(e=>{this.select(e)})};get isOpen(){return this.$el.classList.contains("open")}get current(){return this.options.data.find(e=>e.id===this.selectedId)}onChangeHandler=e=>{e=e.target.dataset.id;this.select(e)};select=e=>{this.selectedId=e,this.$el.querySelector(`[data-id="${e}"]:checked`)?(this.$value.textContent=this.addItem(this.current),this.$el.querySelector(`[data-id="${e}"]`).classList.add("selected"),console.log(this.$value)):(this.$value.textContent=""!==this.removeItem(this.current)?this.removeItem(this.current):this.options.placeholder,this.$el.querySelector(`[data-id="${e}"]`).classList.remove("selected")),this.options.onSelect&&this.options.onSelect(this.items)};addItem=e=>{return this.items.push(e),this.selectText.push(e.value),this.selectText.join(", ")};removeItem=t=>{var e=this.items.findIndex(e=>e.id===t.id);return-1!==e&&(this.items.splice(e,1),this.selectText.splice(e,1)),this.selectText.join(", ")};sliceText=e=>{var t=e.slice(0,20);return t.length<e.length&&(t+="..."),t};toggle=()=>{this.isOpen?this.close():this.open()};open=()=>{this.$el.classList.add("open")};close=()=>{this.$el.classList.remove("open")};destroy=()=>{this.$el.removeEventListener("click",this.toggle),this.checkboxMultiSelect.forEach(e=>{e.removeEventListener("change",this.onChangeHandler)}),this.$el.innerHTML=""};clear=()=>{this.$value.textContent=this.options.placeholder,this.checkboxMultiSelect.forEach(e=>{e.checked=!1,e.classList.remove("selected")}),this.items=[],this.selectText=[]};hideFakeSelect=()=>{null!==this.fakeSelect&&this.fakeSelect.remove()}}